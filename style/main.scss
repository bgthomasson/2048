@import "helpers";

/* Define variables --------------------------------------------------------- */
 
// need "phone" size and "desktop" size
$field-width: 360px; 
$grid-spacing: 15px;
$grid-row-cells: 4;
$tile-size: ($field-width - $grid-spacing * ($grid-row-cells + 1)) / $grid-row-cells;
$tile-border-radius: 3px;

$mobile-threshold: $field-width + 20px;

$text-color: #222222;
$bright-text-color: #f9f6f2;

$tile-color: #eee4da;
$tile-gold-color: #edc22e;
$tile-gold-glow-color: lighten($tile-gold-color, 15%);

$button-color: #1e456e;
$score-color: #24501e; 

$game-container-background: #bbada0;

$transition-speed: 100ms;

/* Primary layout ----------------------------------------------------------- */

body {
    margin: 0 auto;
    padding: 0;
    background: #241709; 
    color: $text-color;
    font-family: Lato, "Open Sans", sans-serif; 
    font-size: 1rem; 
    line-height: 1.5;
    width: $field-width;
}

@media screen and (min-width: 550px) {
    body {
        font-size: 1.125em; 
    }
}

header {
    display: flex;
    align-items: center;
    justify-content: space-between; 
    margin-top: .5em;
}

main{
    display: block; 
    margin-top: 2em; 
}

footer {
    margin-top: 3em;
    background-color: #faf8ef;
    padding: 1em; 
}

.score-container, .best-container {
    $height: 1.25em;
    position: relative;
    background: $score-color;
    padding: 15px 25px;
    font-size: $height;
    height: $height;
    line-height: 2.25;
    font-weight: bold;
    color: white;
    text-align: center;

        &:after {
            position: absolute;
            width: 100%;
            top: 10px;
            left: 0;
            text-transform: uppercase;
            font-size: .9em;
            line-height: .9;
            text-align: center;
            color: $tile-color;
        }

        .score-addition {
            position: absolute;
            right: 30px;
            color: red;
            font-size: $height;
            font-weight: bold;
            color: rgba($text-color, .9);
            z-index: 100;
            animation: move-up 600ms ease-in;
            animation-fill-mode: both;
        }
}

.score-container:after {
    content: "Score";
}

.best-container:after {
    content: "Best"
}

/* MISC ELEMENTS -------------------------------------------------------------*/

h1 {
    font-size: 3em;
    margin: 0;
    text-align: center;
}

a {
    color: $text-color;
    font-weight: bold;
    text-decoration: underline;
    cursor: pointer;
}

button {
    background: $button-color;
    border: none;
    border-radius: 3px;
    box-sizing: border-box;
    cursor: pointer;
    font-weight: bold;
    padding: 0 20px;
    color: $bright-text-color;
    height: 2.5em;
}

// Game field mixin used to render CSS at different width
@mixin game-field {
    .game-container {
        position: relative;
        padding: $grid-spacing;

        cursor: default;
        touch-action: none;

        background: $game-container-background;
        width: $field-width;
        height: $field-width;
        box-sizing: border-box;

        .game-message {
            display: none;
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background: rgba($tile-color, .5);
            z-index: 100;
            text-align: center;

            p {
                font-size: 7em;
                font-weight: bold;
                height: 7em;
                line-height: 1.5;
                margin-top: 222px;
            }

            .lower {
                display: block;
                margin-top: 59px;
            }

            &.keep-playing-button {
                display: none;
            }

            animation: fade-in 800ms ease $transition-speed * 12;
            animation-fill-mode: both;

            &.game-won {
                background: rgba($tile-gold-color, .5);
                color: $bright-text-color;

                .keep-playing-button {
                    display: inline-block;
                }
            }

            &.game-won, &.game-over {
                display: block;
            }
        }
    }

    .grid-container {
        position: absolute;
        z-index: 1;
    }

    .grid-row {
        margin-bottom: $grid-spacing;

        &:last-child {
            margin-bottom: 0;
        }

        &:after {
            content: "";
            display: block;
            clear: both;
        }
    }

    .grid-cell {
        width: $tile-size;
        height: $tile-size;
        margin-right: $grid-spacing;
        float: left;

        border-radius: $tile-border-radius;

        background: rgba($tile-color, .35);

        &:last-child {
            margin-right: 0;
        }
    }

    .tile-container {
        position: absolute;
        z-index: 2;
    }

    .tile {
        &, .tile-inner {
            width: ceil($tile-size);
            height: ceil($tile-size);
            line-height: ceil($tile-size);
        }

        // Build position classes
        @for $x from 1 through $grid-row-cells {
            @for $y from 1 through $grid-row-cells {
                &.tile-position-#{$x}-#{$y} {
                    $xPos: floor(($tile-size + $grid-spacing) * ($x - 1));
                    $yPos: floor(($tile-size + $grid-spacing) * ($y - 1));
                    transform: translate($xPos, $yPos);
                }
            }
        }
    }
}

// End of game-field mixin
@include game-field;

.tile {
    position: absolute; // Makes transforms relative to the top-left corner

    .tile-inner {
        border-radius: $tile-border-radius;
        background: $tile-color;
        text-align: center;
        font-weight: bold;
        z-index: 10;
        font-size: 55px;
    }

    // Movement transition
    transition: $transition-speed ease-in-out;
    transition-property: transform;

    $base: 2;
    $exponent: 1;
    $limit: 11;

    // Colors for all 11 states, false = no special color
    $special-colors: false false, // 2
                    false false, // 4
                    #f78e48 true, // 8
                    #fc5e2e true, // 16
                    #ff3333 true, // 32
                    #ff0000 true, // 64
                    false true, // 128
                    false true, // 256
                    false true, // 512
                    false true, // 1024
                    false true; // 2048

    // Build tile colors
    @while $exponent <= $limit {
        $power: pow($base, $exponent);

        &.tile-#{$power} .tile-inner {
            // Calculate base background color
            $gold-percent: ($exponent - 1) / ($limit - 1) * 100;
            $mixed-background: mix($tile-gold-color, $tile-color, $gold-percent);

            $nth-color: nth($special-colors, $exponent);

            $special-background: nth($nth-color, 1);
            $bright-color: nth($nth-color, 2);

            @if $special-background {
                $mixed-background: mix($special-background, $mixed-background, 55%);
            }

            @if $bright-color {
                color: $bright-text-color;
            }

            // Set background
            background: $mixed-background;

            // Add glow
            $glow-opacity: max($exponent - 4, 0) / ($limit - 4);

            @if not $special-background {
                box-shadow: 0 0 30px 10px rgba($tile-gold-glow-color, $glow-opacity / 1.8),
                inset 0 0 0 1px rgba(white, $glow-opacity / 3);
            }

            // Adjust font size for bigger numbers
            @if $power >= 100 and $power < 1000 {
                font-size: 45px;

                // Media queries placed here to avoid carrying over the rest of the logic
                @include smaller($mobile-threshold) {
                font-size: 25px;
                }
            } @else if $power >= 1000 {
                font-size: 35px;

                @include smaller($mobile-threshold) {
                    font-size: 15px;
                }
            }
        }

        $exponent: $exponent + 1;
    }

    // Super tiles (above 2048)
    &.tile-super .tile-inner {
        color: $bright-text-color;
        background: mix(#333, $tile-gold-color, 95%);

        font-size: 30px;

        @include smaller($mobile-threshold) {
            font-size: 10px;
        }
    }
}

.tile-merged .tile-inner {
    z-index: 20;
    animation: pop 200ms ease $transition-speed;
    animation-fill-mode: backwards;
}

.tile-new .tile-inner {
    animation: appear 200ms ease $transition-speed;
    animation-fill-mode: backwards;
}

/* @KEYFRAMES ----------------------------------------------------------------*/


@keyframes move-up {
    0% {
    top: 25px;
    opacity: 1;
    }

    100% {
    top: -50px;
    opacity: 0;
    }
}

@keyframes appear {
    0% {
        opacity: 0;
        transform: scale(0);
    }

    100% {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes pop {
    0% {
        transform: scale(0);
    }

    50% {
        transform: scale(1.2);
    }

    100% {
        transform: scale(1);
    }
}

@keyframes fade-in {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

